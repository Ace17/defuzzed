#! /usr/bin/env rdmd
/**
 * @brief Generate a random D (valid) source file
 * @author Sebastien Alaiwan
 */

/*
 * Copyright (C) 2016 - Sebastien Alaiwan
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This file is part of defuzzed, a fuzzer for D compilers;
 */

import std.algorithm;
import std.conv;
import std.random: unpredictableSeed;
import std.stdio;

import entropy;
import scope_;
import dfs_generator;

int main(string[] args)
{
  auto seed = unpredictableSeed;

  if(args.length > 1)
    seed = to!int (args[1]);

  string outputPath = "-";

  if(args.length > 2)
    outputPath = args[2];

  auto f = openOutput(outputPath);

  generateRandomSourceFile(seed, f);

  return 0;
}

File openOutput(string path)
{
  if(path == "-")
    return stdout;
  else
    return File(path, "w");
}

void generateRandomSourceFile(int seed, File f)
{
  gen.seed(seed);

  f.writefln("// generated by defuzzed, seed %s", seed);

  auto generators =
    [
    &depthFirstGenerate,
    &breadthFirstGenerate,
    ];

  generators[uniform(0, $)](f);
}

import ast;
import ast_check;
import ast_clone;
import ast_mutate;
import ast_print;

void breadthFirstGenerate(File f)
{
  auto r = getValidRandomProgram();

  f.writefln("// mutation ratio: %.2f", r.mutationRatio);
  printDeclaration(r.tree, f);
  f.writeln();
}

auto getValidRandomProgram()
{
  static struct Result
  {
    Declaration tree;
    float mutationRatio;
  }

  Declaration tree = new ListDeclaration;

  int numMutations;
  const MAX_MUTATIONS = 100;

  for(int i = 0; i < MAX_MUTATIONS; ++i)
  {
    auto mutatedTree = cloneDeclaration(tree);
    mutateDeclaration(mutatedTree);

    auto sc = new Scope;
    sc.onlyStaticInitializers = true;

    if(checkDeclaration(mutatedTree, sc))
    {
      tree = mutatedTree;
      numMutations++;
    }
  }

  return Result(tree, cast(float)numMutations/MAX_MUTATIONS);
}

